using System;
using System.Collections.Generic;
using System.Linq;

using Robowire;

using Xunit;
using Robowire.RobOrm.Core;
using Robowire.RobOrm.Core.EntityGeneration;
using Robowire.RobOrm.Core.EntityModel;

namespace RobOrm.UnitTests
{
    public class EntityImplementorTests
    {
        [Fact]
        public void TestEntityImpl()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var e = container.GetLocator().Get<IEntity1>();

            Assert.NotNull(e);

            var abstr = e as IEntity;
            Assert.NotNull(abstr);
        }

        [Fact]
        public void TestReferencesAbstraction()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var e = container.GetLocator().Get<IEntity2>();

            Assert.NotNull(e);
            var abstr = e as IEntity;
            Assert.NotNull(abstr);

            var refProps = abstr.GetReferenceProperties().ToList();
            Assert.Equal(2, refProps.Count);

            var singleEntityProp = refProps.FirstOrDefault(i => i.Item1 == nameof(IEntity2.Reference));
            Assert.NotNull(singleEntityProp);
            Assert.Equal(typeof(IEntity1), singleEntityProp.Item2);

            var listEntityProp = refProps.FirstOrDefault(i => i.Item1 == nameof(IEntity2.RefList));
            Assert.NotNull(listEntityProp);
            Assert.Equal(typeof(IEntity1), listEntityProp.Item2);

            var singlePropHandle = abstr.OpenProperty(nameof(IEntity2.Reference)) as EntityHolder;
            Assert.NotNull(singlePropHandle);

            var listPropHandle = abstr.OpenProperty(nameof(IEntity2.RefList)) as EntityList;
            Assert.NotNull(listPropHandle);
        }

        [Fact]
        public void TestGetValues()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var e = container.GetLocator().Get<IEntity1>();

            e.FirstName = "fn";
            e.LastName = "ln";
            e.Id = 321;

            var vals = ((IEntity)e).GetValues().ToList();

            Assert.Equal(3, vals.Count);

            Assert.Equal(e.FirstName, vals.Single(i => i.ColumnName == nameof(IEntity1.FirstName)).Value);
            Assert.Equal(e.LastName, vals.Single(i => i.ColumnName == nameof(IEntity1.LastName)).Value);
            Assert.Equal(e.Id, vals.Single(i => i.ColumnName == nameof(IEntity1.Id)).Value);

            Assert.True(vals.Single(i => i.ColumnName == nameof(IEntity1.Id)).IsPk);
            Assert.False(vals.Single(i => i.ColumnName == nameof(IEntity1.FirstName)).IsPk);
            Assert.False(vals.Single(i => i.ColumnName == nameof(IEntity1.LastName)).IsPk);
        }

        [Fact]
        public void TestGetSaveMode()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var e = container.GetLocator().Get<IEntity1>();
            Assert.Equal(SaveMethodType.Merge, ((IEntity)e).GetSaveMethodType());
            
            var e3 = container.GetLocator().Get<IEntity3>();
            Assert.Equal(SaveMethodType.Merge, ((IEntity)e3).GetSaveMethodType());

            var e4 = container.GetLocator().Get<IEntity4>();

            var ent4 = (IEntity)e4;

            Assert.Equal(SaveMethodType.Insert, ent4.GetSaveMethodType());

            ent4.PrimaryKeyValue = 123;
            Assert.Equal(SaveMethodType.Update, ent4.GetSaveMethodType());
        }

        [Fact]
        public void TestGetPkType()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var e = container.GetLocator().Get<IEntity3>() as IEntity;
            Assert.Equal(typeof(string), e.PrimaryKeyType);
        }

        [Fact]
        public void TestIsPkAutogenerated()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));

            var locator = container.GetLocator();

            Assert.False(((IEntity)locator.Get<IEntity1>()).IsPrimaryKeyAutogenerated);
            Assert.True(((IEntity)locator.Get<IEntity4>()).IsPrimaryKeyAutogenerated);
            Assert.False(((IEntity)locator.Get<IEntity5>()).IsPrimaryKeyAutogenerated);
        }

        [Fact]
        public void TestEntityNameProperty()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));
            var locator = container.GetLocator();

            Assert.Equal("Entity1", ((IEntity)locator.Get<IEntity1>()).DbEntityName);
            Assert.Equal("Entity2", ((IEntity)locator.Get<IEntity2>()).DbEntityName);
            Assert.Equal("Entity3", ((IEntity)locator.Get<IEntity3>()).DbEntityName);
            Assert.Equal("Entity4", ((IEntity)locator.Get<IEntity4>()).DbEntityName);
        }

        [Fact]
        public void TestEntityCollection()
        {
            var container = new Container();
            container.Setup(c => c.ScanAssembly(typeof(EntityImplementorTests).Assembly));
            var locator = container.GetLocator();

            var collector = locator.Get<IEntityCollector>();

            var lst = collector.GetEntityTypes().ToList();

            Assert.True(lst.Contains(typeof(IEntity1)));
            Assert.True(lst.Contains(typeof(IEntity2)));
            Assert.True(lst.Contains(typeof(IEntity3)));
            Assert.True(lst.Contains(typeof(IEntity4)));
            Assert.True(lst.Contains(typeof(IEntity5)));

            var dist = lst.Distinct();

            Assert.Equal(lst.Count, dist.Count());
        }

        [Entity]
        public interface IEntity1
        {
            int? Id { get; set; }

            [DbString]
            string FirstName { get; set; }

            [DbString]
            string LastName { get; set; }
        }

        [Entity]
        public interface IEntity2
        {
            int? Id { get; set; }

            IEntity1 Reference { get; }

            IEnumerable<IEntity1> RefList { get; }
        }

        [Entity]
        public interface IEntity3
        {
            string Id { get; set; }

            [DbString]
            string Prop { get; set; }
        }

        [Entity]
        public interface IEntity4
        {
            int? Id { get; }
            
            [DbString]
            string Prop { get; set; }
        }

        [Entity]
        public interface IEntity5
        {
            string Id { get; set; }

            bool X { get; set; }
        }
   }
}
